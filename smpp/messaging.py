from typing import Optional

from . import parse


class ResponseSender:
    """
    Этот класс используется как интерфейс отправки пакетов клиентов через
    соединения в режиме Receiver. MessagingDispatcher использует объект
    с данным интерфейсом, чтобы отправлять клиентам отчеты о доставке
    сообщений с режимом отправки "Store and Forward".
    """
    def send(self, system_id: int, pdu: parse.PDU):
        raise NotImplementedError('send')


class Deliverer:
    """
    Этот класс используется как интерфейс к внешнему доставщику сообщений.
    """

    # Аргументы метода надо будет дописать по мере наобходимости.
    # Возможно, стоит создать структуру для передачи всех необходимых данных.
    def deliver(self, *args):
        raise NotImplementedError('deliver')


class Dispatcher:
    """
    Класс обработки команд соединения в режиме Transmitter.
    Отвечает за обработку пакетов и формирование ответов, т.е. за хранение
    сообщений, откладывание доставки, повторные попытки отправки, инвалидацию
    сообщений после указанного клиентом срока, замену сообщений, отмену
    сообщений, отправка отчета о доставке.
    Он же вызывает функцию осуществления доставки.

    Данный класс _не_ обязан обрабатывать пакеты BIND_* и UNBIND - это должен
    делать вызывающий код.
    """

    def __init__(self, system_id: int, rs: ResponseSender, d: Deliverer):
        # system_id - идентификатор пользователя.
        self._system_id = system_id
        self._rs = rs
        self._d = d

    def receive(self, pdu: parse.PDU) -> Optional[parse.PDU]:
        """
        Обрабатывает очередной входящий пакет. Если на этот пакет следует
        какой-то ответ, метод его формирует и возвращает. Если ответа не следует,
        метод возвращает None.

        Этот метод гарантировано не выбрасывает никаких исключений. В случае
        ошибки обработки он возвращает пакет GENERICK_NACK согласно протоколу.
        """
